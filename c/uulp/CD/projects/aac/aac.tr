.\"
.\" source file for aac project - uses -ms macros for groff
.\" version: 1 feb 2002
.\"
.\" convert to postscript with: groff -Tps -ms aac.tr > aac.ps
.\" 
.\"
.rm CH
.ds RH \s8almost ac\s0
.ds RF \s8page %\s0
.ds LF \s8printed \*(DY\s0
.DS C
.ft B
Programming Project: almost ac
.ft R
.DE
.SH
Introduction
.sp 6p
.LP
For this assignment you will write a program that implements some
of the functions of the Unix \fBac\fR command.  In doing so, you
will have a chance to use the open(), read(), and close()
system calls, work with functions for managing the Unix representation
of time, and experiment with buffered input.  Much of the information
you will need will come from the on-line manual.  
.sp 8p
\fBac\fR is an accounting command that computes login time for users.
For Linux, the command is included in the RPM package called psacct.
.SH
Specific Details
.sp 6p
.LP
Write a program called \fBaac\fR (for \fBa\fRlmost-ac) that implements
two parts of the regular \fBac\fR command: the part that handles a single 
logname as a command line argument and the part that handles alternate
login info files (the -w option).  That is, your program should handle
commands such as
.in +0.5i
.ft C
.ps 8
.vs 9p
.sp 6p
 % aac smith
 % aac -w sample.wtmp smith
 % aac smith -w sample.wtmp 
.sp 6p
.ps 10
.vs 12p
.in -0.5i
.ft R
The output of your program should be identical to that produced by the
version of ac on the systems here.   
In the example just given, it might look like:
.br
.ft C
.ps 8
.sp 6p
.ti +0.5i
 total     2.67
.ps 10
.ft R
.SH
Getting Started
.sp 6p
.LP
Make a subdirectory for this project.  Change into
that directory and link to the sample files and reference material.  Type
.br
.ft C
.ps 8
.vs 9p
.sp 6p
.in +0.5i
 mkdir aac
 cd aac
 ln   -s   ~COURSENAME/hw/aac/files/*   \fB.\fP     \fR<- that's a dot at the end\fP
.sp 6p
.in -0.5i
.vs 12p
.ps 10
.ft R
.br
Read the manual page for \fBac\fR.
Try the \fBac\fR
command.  Find what file \fBac\fR uses to get its data.  
Read the manual page for that file.  Figure out to use that
information to compute total connect time for a user.
.sp 8p
.LP
The files include a program, \fButmpcopy.c\fR , that you can use to
make a subset of the real wtmp file.  
A sample file does not change; the real one does, and
it is easier to test your software on a fixed set of data.
You can use a sample subset to experiment with the real ac 
and with your program.  
To tell \fBac\fR to use this file, use the -w option.   
.sp 8p
The sample files also include a program, \fBdumputmp.c\fR  that prints out
the contents of utmp files.  Read the program, study the header file,
make sense of data structures.
To use \fBdumputmp\fR to examine the sample file, compile the
program then type:\ \ \  \fC\s8dumputmp sample.wtmp\s0\fR

A wtmp file contains records of users logging in and logging out.
A \s8USER\s0 process means a user has logged in and is running 
user commands at the terminal, and a \s8DEAD\s0 process means the user 
process has died.  Examine the output of dumputmp to see what it
contains and think how to process those records.

The purpose of your program is to compute total login time for
a user specified on the command line.  You need to devise a system to
read the file with an eye for a specific logname.
Your program should print an error message if it does not 
get one logname as an argument.  (Note: the real ac program
prints a total of all login session times if no argument is
given; your program does not have to do this.) 
Read the file looking for records that represent logins for that
user.  Then look for the corresponding logout on that terminal.  
When your program finds the corresponding logout, the program 
can compute the connect time for that session at a terminal.
.SH
Special Conditions
.sp 6p
.LP
Once you handle simple logins and logouts, enhance your logic
to handle fancier conditions.
First, the same user can be logged in at several
terminals at the same time.  All these connect sessions are counted
separately.  For example, if you login at one terminal from noon to
2pm, and at another terminal from 1pm to 4pm, you accrue 5 hours
of connect time.
.sp 8p
The next thing to worry about is that not every login has a matching
logout.  For example, what happens if a user is still logged
in when you run \fBac\fR?  In that case, you have to use the current time
as the `logout' time.  Second, what happens when the system crashes? 
In this case there will be a `reboot' entry in the login data file.  
It is also possible for a user to type `login' to the prompt 
and login as another user without explicitly logging out.  
Doing so creates a new login entry in the table without
creating a matching logout process.  Finally, the system administrator
may change the system time.  For example, how does setting the clock
back an hour affect the time between login and logout entries?
.SH
Getting Finished
.sp 6p
.LP
When you have the basic version working and handling special 
conditions, tune your program by buffering file input.  
The buffering code must be in a separate file with a
clearly defined set of functions.  By doing so, you can modify how 
you read from the file without having to change the main program.  
You may use the buffering functions in \fButmplib.c\fR, or you may 
write your own.
Your program must do some sort of input buffering.  
.SH
Testing Your Program
.sp 6p
.LP
Your program is supposed to be an exact subset of the regular
\fBac\fR, so you can test your program by comparing its output to
the output of \fBac\fR.  Here's how:
.br
.sp 6p
.ft C
.ps 8
.vs 9p
.in +0.5i
 /usr/sbin/ac $USER > output.ac
 aac $USER > output.aac
 diff output.ac output.aac
.in -0.5i
.ps 10
.vs 12p
.sp 6p
.ft R
.br
You can read the manual about the \fBdiff\fR command.  
.SH
What to Hand in
.sp 6p
.LP
.sp 6p
Submit your code for this solution, a Makefile, a project plan,
and a \s8README\s0 file.  
.SH
Extra Credit
.sp 6p
.LP
You can earn 10 points of extra credit if you expand your
program to handle an arbitrary number of lognames on the command
line.  The regular \fBac\fR does this.  Try it.
.SH
Note for Other Systems
.sp 6p
.LP
You can develop and test your program on another Unix machine.  Note
that the size and format of wtmp files varies from one version of
Unix to another.  The BSD version is much simpler than the SYSV
style many systems, including Linux, use.
Your program should be portable, the data may not be portable.  If you
use GNU/Linux and do not find \fBac\fR on your system, you can install
it from the package called \fBpsacct\fR.
