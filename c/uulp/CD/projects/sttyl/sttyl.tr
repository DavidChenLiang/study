.de Cs
.ft C
.ps 9
..
.de Ce
.ps 0
.ft P
..
.rm CH
.ds RH \s8sttyl\s0
.ds RF \s8page %\s0
.DS C
.ft B
Programming Project: stty-lite
.ft R
.DE

.SH
Introduction

.LP
For this assignment you will write a program that works sort of 
like the Unix \fBstty\fR command.  In doing so, you
will have a chance to work with the tcgetattr/setattr() calls and learn
about some of the attributes of terminal devices.
.sp 6p
.SH
The Terminal Driver

.LP
The terminal input/output devices like crt terminals, printers, and modems
appear as files in the Unix directory tree, but they are really
terminals.  As such, they must have attributes that make them
useful to people.  For example, people sometimes make typing mistakes.
These people would like to be able to press an `erase' key to correct
the errors before the program receives the input.

This `erase' key example introduces the idea of a tty driver.  The driver
is a piece of software that accepts keystrokes from the terminal and
assembles them into a line.  When the user presses the `erase' key, the
character is removed from the line.  When the user is done, he or she
presses the return key, and the terminal driver sends the line off to the
program.  The program does not have to worry about the editing commands.
Unless it want to.

For another example consider the passwd program.  This program prompts
a user for a new password.  It disables the usual echoing of characters.
It does so by telling the tty driver not to echo characters.

The tty driver, then, is a piece of software.  It is part of the kernel.
The tty driver stores for each terminal a set of attributes.  These
attributes include what the erase character is, whether to
echo characters, whether to wait for a newline or whether to pass
characters along as soon as they show up.
.sp 6p
.SH
The stty command

.LP
The stty command lets you see what the current settings are, and it lets
you change the tty settings.  Try it.  With no arguments, it lists
the most popular tty settings.  With the argument `-a' it lists
a lot of info.

.LP
To change settings, you call stty with the name of a setting.  For
example, to enable echoing, you type:  \fC\s9\ stty echo\ \s0\fP .
Typing \fC\s9\ stty -echo\ \s0\fP
turns off echoing.  Read the manual page for a list
of available options.  You can set several options on one line as in
.DS
.ft C
.ps 9
	stty -echo olcuc erase ^X
.ps 0
.ft P
.DE
which turns off echo, outputs lowercase letters in uppercase, and sets the erase
character to Ctrl-X.

Read the manual entry on stty and experiment with setting the erase
character and the modes to things like -echo or -icrnl.  When you try
these experiments, you must use the standard Unix shell, \fBsh\fR, not
your usual login shell.  Type \fBsh\fR to run this shell, and type
exit to return to your usual shell.  You might
need to press Ctrl-J if you disable carriage return mapping.  And you might
have to type logout if Ctrl-D seems to stop working.
.SH
How stty works
.sp 4p
.LP
stty is an interface to the tcgetattr() and tcsetattr() call that gets 
and sets the
driver settings associated with standard input.  When you call stty
with no arguments, it gets the current settings and displays them
in a form readable by people.

When you call stty with a setting, such as -icrnl, it converts that
string into the appropriate bit in the status word and sets the
tty driver.
The convention is that a word like  \fC\s-1icanon\s+2\fP
enables a mode,
while the word with a leading dash, as in \fC\s9-icanon\s0\fP
disables that mode.
.sp 6p
.SH
The Assignment
.sp 4p
.LP
Write a version of stty, called sttyl, that supports the following options:
.sp 4p
.IP 1.
\fIdisplay settings\fR\ \ \ if sttyl is invoked with no arguments, it prints
something more or less like the following.  It does not have to be exact,
it just has to include the intr, erase, and kill chars, and about
eight other settings.
.DS
.ft C
.ps 9
.vs 10p
    speed 9600 baud; evenp hupcl cread 
    intr = ^C; erase = ^H; kill = ^U; start = ^Q; stop = ^S;
    brkint -inpck icrnl -ixany onlcr tabs
    iexten echo -echoe -echok 
.vs 12p
.ps 0
.ft P
.DE
.IP 2.
\fIset erase and kill\fR\ \ \ \ sttyl should accept the arguments 
`erase' and `kill' .  In each case, the argument after the word
`erase' or `kill' is the character to make the erase or kill character.
Try the real stty to see how this works.  The character can also
be expressed as a "^" and a letter.
.sp 4p
.IP 3.
\fIset other attributes\fR\ \ \ sttyl should accept and correctly
handle the words: \fCicrnl, onlcr, echo, echoe, olcuc, tabs,
icanon, \fRand\fC isig \fR.  It should handle these with or without
a leading dash.  A leading dash turns off that attribute, while
no leading dash turns it on.  Be careful about getting stuck in -icanon
mode.
.sp 4p
.IP 4.
\fImultiple arguments\fR\ \ \ sttyl must accept multiple settings
on the command line.  See the example in the section `The stty commmand'
above for an example.
.sp 4p
.IP 5.
\fIerror handling\fR\ \ \ sttyl should print out the message `unknown mode'
for arguments that it does not know about.
.sp 4p
.IP 6.
\fItable driven\fR\ \ \ It is possible to write this program with
a large number of \fIif( strcmp(..)) else if ( strcmp(..))\fR blocks.
Using that approach makes the code very long and tedious to update.
Ten points of your score go to a table-driven solution.  See the
showtty.c program in the text for a starting model.
.sp 4p
.IP 7.
\fIClean Compile\fR\ \ \ Compile your program with \fCgcc -Wall\fR and
make sure you correct every warning and error it reports.  Many small
bugs can be avoided by heeding these warnings.
.sp 6p
.LP
\fBImportant\fR: test your program using \fBsh\fR.
.LP
\fBOverview\fR: sttyl has to get the current settings for stdin, and 
if there are no args, then print the current settings.  If there are args, 
it has to step through through the command line arguments and act on each
string.  When it has processed all the command line arguments, it
has to write the new settings back to the driver.
.SH
What to Turn in
.sp 4p
.LP
Turn in (a) fully documented, easy-to-read source listing,
(b) a sample run, and (c) a script of a clean compile, (d) a Makefile,
(e) a software Plan.
Your sample run must include a run of the official test script.  
Run this by typing  \fC\s-1~COURSE/hw/stty/test.stty\s0\fR
