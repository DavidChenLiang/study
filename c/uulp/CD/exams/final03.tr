.de UL \" underline argument, don't italicize
.if t \&\\$1\l'|0\(ul'\\$2
.if n .I \\$1 \\$2
..
.hy 14
.sp 2i
.ft I
.ps 12
.ce
Final Exam\h'2.4i'Hours left: 2

.ft R
.TS
center linesize(8);
|| cw(1.5i)e ce ce
|| cw(1.5i)e ce ce || 
|| cw(1.5i)e ce ce.
.ps 14
=
.sp 12p
Exam 03
.sp 22p
	COURSE
.sp 22p
		O
.sp 22p
=
.TE
.ft I
.ps 12

.ce
DATE
.ft R
.sp 24p
.ps 12p



.ce
Your Name Here: \l'2i'





.in +1i
.ll -1i
.vs 15p
\fIInstructions\fR:  You have TIME for this exam.  
Please write your answers on the pages in this exam booklet.  
No scrap paper or additional sheets will be accepted.  Watch 
your time and be concise.  Write clearly (illegible answers will 
be `silently ignored'), and \fIalways\fR check the return value 
of a system call.  Good luck.
.in -1i
.ll +1i
.bp
.sp 1i
.TS
linesize(8) center allbox;
c c c l
n n n n.
prob	points	got	section
1	5
2	5
3	5
4	5
5	5
6	5
7	5

8	6
9	6
10	6
11	6
12	6
13	6
14	6

1	3
2	2
3	5
4	5
5	4
6	4


.TE
.bp
.sp 0.8i
.ps 10
.vs 12p
.ft B
.tl 'Part One'Seven Problems, each worth 5 points'page 1'
\l'6.5i'

.ft R
.ft B
Problems 1-7:  Each problem describes a particular task.  For each one,
state which system call(s) you would use to perform that task.  In the
third column, state clearly and briefly the logic of your solution.
.ft R

.TS
center box;
lIw(1.2i) | lw(1.5i) | lw(3i).
.ft I
task	system calls	method
.ft R
=
T{
.hy 14
Determine if two names are links to the same file.
T}
.sp 0.5i
_
T{
.hy 14
Redirect the standard output of a program to a file.
T}
.sp 0.5i
_
T{
.hy 14
Turn off character echoing so a user can type a password
securely.
T}
.sp 0.5i
_
T{
.hy 14
Write a program that exits if Ctrl-C is pressed twice
within 3 seconds.
T}
.sp 0.34i
_
T{
.hy 14
Get the last five characters in a file.
T}
.sp 0.66i
_
T{
.hy 14
Send data to a device like a printer or tape drive.
T}
.sp 0.5i
_
T{
.hy 14
Run a program and determine its exit status.
T}
.sp 0.5i
.TE
.bp
.sp 0.8i
.ps 10
.vs 12p
.ft B
.tl 'Part Two'Seven problems, each worth 6 points'page 2'
\l'6.5i'

Problems 8-14: Compare and contrast.  Each of these problems mentions
two related concepts, system calls, or operations.  For each pair, explain
briefly and clearly (a) what they have in common, (b) when you would use
the first item, and (c) when you would use the second item.

.ft R

8. \fCO_TRUNC\fR , \fCO_CREAT\fR
.sp 2.7i
9. \fCsignal()\fR, \fCkill()\fR
.sp 2.7i
10. \fCfopen()\fR, \fCfdopen()\fR
.bp
.sp 0.8i
.ps 10
.vs 12p
.ft B
.tl 'Part Two'continued'page 3'
\l'6.5i'
.ft R

11. A child process communicates with its parent by using exit(); a child
process communicates with its parent by using a pipe.
.sp 2i
12. Stream socket, Datagram socket
.sp 2i
13. wait(), pause()
.sp 2i
14. blocking input, non-blocking input
.bp
.sp 0.8i
.ps 10
.vs 12p
.ft B
.tl 'Part Three'One problem, 23 points'page 4'
\l'6.5i'
.ft R

15. The Electronic Strip Chart Recorder.

First, a metaphor.  Outside of lecture hall C is a strip chart recorder that
graphs seismic activity as measured at a geological station somewhere out
of the city.  There are two parts to the device.  The first part is
a pen that moves back and forth to indicate the strength of vibrations detected.
The second part is the steadily moving roll of paper.  The steady motion of
the paper allows the `output' of the pen to be spread out across the paper.
The physical separation of the pen output corresponds to the temporal 
separation of the events.

Next a software example.  Imagine there is a program that outputs
text at various intervals.  It might be a program attached to a device
that detects the bright flashes caused by shooting stars and prints
messages about their position and intensity.
It might be a program that looks for prime numbers and prints out each
one it finds.  In these examples, the program outputs
information in text form to standard output.  

Imagine you want to spread the output across a time line, just as the
strip chart recorder spreads seismic jiggles across a time line.   For
example, the prime number strip chart might look like:
.br
.ft C
.ps 8
.vs 9p
.nf
.in +1i
13:00:00
13:00:10
13:00:20
   1000001819
13:00:30
13:00:40
   1000001857
   1000001887
13:00:50
   1000001917
   1000001927
13:01:00
13:01:10
   1000001957
.in -1i
.fi
.vs 12p
.ps 10
.ft R
The time markers are printed out every ten seconds.  Any output 
the prime number program produces appears indented by three spaces
between the time markers.  If this strip-chart program were attached
to the shooting star detector, the output would show positions and
intensities instead of prime numbers between the time markers.

The program to plot the output of a given program on a time line
will be called strip-chart, and it will work as follows:

\s8USAGE\s0
.sp 6p
.ti +0.5i
\fCstrip-chart interval program_name [program_arg1 program_arg2 ..]\fR

\s8DESCRIPTION\s0
.sp 6p
.in +0.5i
\fBstrip-chart\fR prints out a sequence of time markers separated by
a \fIinterval\fR seconds.  A program
(and any arguments it might take) is given on the command line.
That program is run as a subprogram and its output is combined with
the time marker output of \fBstrip-chart\fR.  Each line of output from
\fIprogram_name\fR is indented three spaces to distinguish it from
the time markers.

If \fIprogram_name\fR closes its standard output (which will occur 
if the program exit()s, \fBstrip-chart\fR prints "program exited"
on the strip chart and exit.

If \fBstrip-chart\fR receives an interrupt signal, it prints
"interrupted" on the strip chart, shuts down \fIprogram_name\fR and
exits.
.in -0.5i
.bp
.sp 0.8i
.ps 10
.vs 12p
.ft B
.tl 'Part Three'continued'page 5'
\l'6.5i'
.ft R
Discuss a way to implement this program by answering the following
questions.

.in +0.2i
.ll -0.2i
i) Someone suggests a quick solution:  write a shell script to
spit out the time every n seconds:
.sp 3p
.ft C
.ps 8
.vs 9p
    while true
    do
        date ; sleep $INTERVAL
    done
.vs 12p
.ps 10
.ft R
.sp 3p
and run it in the background and run \fIprogram_name\fR in the
foreground.  On what details of the strip-chart description does
this method fail?

ii) Strip-chart has to read standard output and standard error
of \fIprogram_name\fR from a pipe and copy the data to strip-chart's
own standard output.  Explain why \fIprogram_name\fR should not
be allowed to write to standard output directly.

iii) Sketch the data connections between the strip-chart program
and the \fIprogram_name\fR it runs.  Show all pipes, standard input,
standard output, and standard error for each process and their connections.

iv) If strip-chart is waiting for input from \fIprogram_name\fR, how can
it print the time out every \fIinterval\fR seconds?  (hint: how did pong
do this?)  Describe what system calls you would use to implement this solution.

v) How does strip-chart handle the interrupt signal?  What operations
does it have to perform to shut down the child process correctly?

vi) Describe the initialization operations of strip-chart.  
Describe the main loop of strip-chart.

.ll +0.2i
.in -0.2i
Answer these questions on this and the following pages.

.sp |10i
.bp
.sp 0.8i
.ps 10
.vs 12p
.ft B
.tl 'Part Three'continued'page 6'
\l'6.5i'
.bp
.sp 0.8i
.ps 10
.vs 12p
.ft B
.tl 'Part Three'continued'page 7'
\l'6.5i'
